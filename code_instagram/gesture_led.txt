"""
Project: Hand Gesture Recognition and Arduino Communication
Developed by: [Your Name or Organization]
Description: This code uses Mediapipe for real-time hand gesture recognition 
and sends the states of raised fingers to an Arduino via serial communication. 
It tracks fingers, identifies which are raised, and transmits this data to control devices.
"""

import cv2  # OpenCV for video capture and processing
import mediapipe as mp  # Mediapipe for hand tracking
import serial  # Serial communication with Arduino
import time  # Time for delays

# Serial port configuration for Arduino (adjust as needed)
arduino = serial.Serial('COM9', 9600)  # Replace 'COM9' with the Arduino's serial port
time.sleep(2)  # Wait for the serial connection to initialize

# Mediapipe setup for hand tracking
mp_hands = mp.solutions.hands  # Mediapipe hands solution
hands = mp_hands.Hands(
    min_detection_confidence=0.7,  # Minimum confidence for hand detection
    min_tracking_confidence=0.7   # Minimum confidence for hand tracking
)
mp_drawing = mp.solutions.drawing_utils  # Utility for drawing landmarks on the image

# Function to identify raised fingers based on hand landmarks
def identificar_dedos(hand_landmarks):
    """
    Identifies which fingers are raised based on the position of hand landmarks.

    Args:
        hand_landmarks: Mediapipe landmarks of a detected hand.

    Returns:
        List of integers indicating the state of each finger (0 = down, 1 = up).
    """
    dedos = [0] * 5  # List to store the state of each finger (0 = down, 1 = up)

    # Key indices for fingertip and joint positions
    ponta_dedos = [4, 8, 12, 16, 20]  # Fingertips: thumb, index, middle, ring, pinky
    juntas = [3, 6, 10, 14, 18]       # Corresponding lower joints

    # Check the state of each finger
    for i in range(5):
        if i == 0:  # Thumb (horizontal check)
            if hand_landmarks.landmark[ponta_dedos[i]].x < hand_landmarks.landmark[juntas[i]].x:
                dedos[i] = 1
        else:  # Other fingers (vertical check)
            if hand_landmarks.landmark[ponta_dedos[i]].y < hand_landmarks.landmark[juntas[i]].y:
                dedos[i] = 1

    return dedos

# Video capture initialization
cap = cv2.VideoCapture(0)  # Open the default camera

while cap.isOpened():
    ret, frame = cap.read()  # Capture a frame
    if not ret:
        break

    # Flip the frame horizontally and convert it to RGB
    frame = cv2.flip(frame, 1)  # Flip for a mirror-like view
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert to RGB

    # Process the frame to detect hands
    result = hands.process(rgb_frame)

    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            # Draw hand landmarks on the frame
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Identify raised fingers
            dedos = identificar_dedos(hand_landmarks)

            # Display the states of the fingers
            texto = f"Thumb: {dedos[0]}, Index: {dedos[1]}, Middle: {dedos[2]}, Ring: {dedos[3]}, Pinky: {dedos[4]}"
            cv2.putText(frame, texto, (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

            # Send the finger states to Arduino via serial
            comando = ''.join(map(str, dedos)) + '\n'  # Example: "11000\n" for index and middle fingers raised
            arduino.write(comando.encode())

    # Display the frame
    cv2.imshow("Hand Detection", frame)

    # Exit when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()  # Release the video capture
cv2.destroyAllWindows()  # Close all OpenCV windows
arduino.close()  # Close the serial connection
